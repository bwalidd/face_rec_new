# 03-database-redis-fixed.yaml
# Database and Redis Services - Fixed

# PostgreSQL Database - Allow any node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-database
  namespace: face-recognition-system
  labels:
    app: postgresql
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      # Removed nodeSelector - let Kubernetes decide
      nodeSelector:
        kubernetes.io/hostname: bluedove2-ms-7b98
      containers:
      - name: postgres
        image: postgres:15  # Use specific version for stability
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        resources:
          limits:
            cpu: "1000m"    # Reduced from 2000m
            memory: "2Gi"   # Reduced from 4Gi
          requests:
            cpu: "500m"     # Reduced from 1000m
            memory: "1Gi"   # Reduced from 2Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: postgres-data
        emptyDir: {}  # Use persistent volume in production

---
# Redis Primary - Allow any node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-primary
  namespace: face-recognition-system
  labels:
    app: redis-primary
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-primary
  template:
    metadata:
      labels:
        app: redis-primary
        component: cache
    spec:
      # Removed nodeSelector - let Kubernetes decide
      containers:
      - name: redis
        image: redis:7-alpine  # Use lighter alpine version
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - admin
        - --protected-mode
        - "no"
        - --maxmemory
        - 256mb    # Reduced from 512mb
        - --maxmemory-policy
        - allkeys-lru
        - --appendonly
        - "no"     # Simplified config
        resources:
          limits:
            cpu: "500m"     # Reduced from 1000m
            memory: "512Mi" # Reduced from 1Gi
          requests:
            cpu: "100m"     # Reduced from 500m
            memory: "128Mi" # Reduced from 512Mi
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - admin
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - admin
            - ping
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 3

---
# Redis Channels - Allow any node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-channels
  namespace: face-recognition-system
  labels:
    app: redis-channels
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-channels
  template:
    metadata:
      labels:
        app: redis-channels
        component: cache
    spec:
      # Removed nodeSelector - let Kubernetes decide
      containers:
      - name: redis
        image: redis:7-alpine  # Use lighter alpine version
        ports:
        - containerPort: 6380
        command:
        - redis-server
        - --port
        - "6380"
        - --requirepass
        - admin
        - --protected-mode
        - "no"
        - --maxmemory
        - 256mb    # Reduced from 512mb
        - --maxmemory-policy
        - allkeys-lru
        - --appendonly
        - "no"     # Simplified config
        resources:
          limits:
            cpu: "500m"     # Reduced from 1000m
            memory: "512Mi" # Reduced from 1Gi
          requests:
            cpu: "100m"     # Reduced from 500m
            memory: "128Mi" # Reduced from 512Mi
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "6380"
            - -a
            - admin
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "6380"
            - -a
            - admin
            - ping
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 3