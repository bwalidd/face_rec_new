# 04-web-services.yaml
# Frontend, Celery, and Web Services - SIMPLIFIED and FIXED

# React Frontend - Master Node (Keep as is, this looks fine)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-frontend
  namespace: face-recognition-system
  labels:
    app: react-frontend
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: react-frontend
  template:
    metadata:
      labels:
        app: react-frontend
        component: frontend
    spec:
      nodeSelector:
        kubernetes.io/hostname: bluedove2-ms-7b98
      containers:
      - name: react-frontend
        image: bwalidd/new-django:front-new-12.6 #bwalidd/new-django:frontend-prod-latest
        ports:
        - containerPort: 9999
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=1536"
        - name: GENERATE_SOURCEMAP
          value: "false"
        resources:
          limits:
            cpu: "1500m"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /
            port: 9999
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 9999
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]

---
# Celery Worker - SIMPLIFIED like the working script
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-direct
  namespace: face-recognition-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-direct
  template:
    metadata:
      labels:
        app: celery-direct
    spec:
      nodeSelector:
        kubernetes.io/hostname: bluedovve-ms-7b98
      containers:
      - name: celery-worker
        image: bwalidd/new-django:base-image-fix1
        workingDir: /app/Backend
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Current directory: $(pwd)"
          echo "Contents of /app/Backend:"
          ls -la
          echo "Contents of nested Backend/:"
          ls -la Backend/
          
          echo "Testing Redis connection..."
          python -c "import redis; r=redis.Redis(host='redis-primary-service', port=6379, password='admin'); print('Redis:', r.ping())"
          
          echo "Testing Django import..."
          python -c "import Backend.settings; print('Django settings imported successfully')"
          
          echo "Testing Celery app import..."
          python -c "from Backend.celery_prefork import app; print('Celery app imported successfully')"
          
          echo "Starting Celery worker..."
          exec celery -A Backend.celery_prefork worker \
            --queues=prefork_queue \
            --concurrency=4 \
            --max-tasks-per-child=50 \
            --prefetch-multiplier=1 \
            -Ofair \
            --heartbeat-interval=30 \
            -n k8s-worker@%h \
            --loglevel=info
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONPATH
          value: "/app/Backend"
        - name: CELERY_BROKER_URL
          value: "redis://:admin@redis-primary-service:6379/0"
        - name: CELERY_RESULT_BACKEND
          value: "redis://:admin@redis-primary-service:6379/0"
        - name: DJANGO_SUPERUSER_PASSWORD
          value: "Bluedove1234"
        - name: DJANGO_SUPERUSER_EMAIL
          value: "root@root.com"
        - name: DJANGO_SUPERUSER_USERNAME
          value: "bluedove"
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          limits:
            cpu: "1000m"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"