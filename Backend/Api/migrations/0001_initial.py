# Generated by Django 5.0.1 on 2024-06-25 10:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImageProc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails')),
                ('url', models.TextField()),
                ('websocket_url', models.TextField(null=True)),
                ('cords', models.TextField(null=True)),
                ('type', models.CharField(choices=[('face', 'face'), ('line', 'line'), ('area', 'area')], default='face', max_length=255)),
                ('procId', models.CharField(max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('cin', models.CharField(max_length=100, null=True, unique=True)),
                ('company_id', models.CharField(max_length=250, null=True, unique=True)),
                ('detection_count', models.IntegerField(default=0)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Zones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('face', 'face'), ('line', 'line'), ('area', 'area')], default='face', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Detections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('detection_frame', models.ImageField(blank=True, null=True, upload_to='detections/')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('video_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.imageproc')),
            ],
        ),
        migrations.CreateModel(
            name='DetectionPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conf_value', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('detection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.detections')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.person')),
            ],
        ),
        migrations.CreateModel(
            name='PersonImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='database/')),
                ('encoding', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), default=list, size=None)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='Api.person')),
            ],
        ),
        migrations.CreateModel(
            name='SaveDetectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conf_value', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('detection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.detections')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.person')),
            ],
        ),
        migrations.AddField(
            model_name='imageproc',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Api.zones'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.CharField(blank=True, max_length=255)),
                ('cover_photo', models.ImageField(blank=True, null=True, upload_to='covers/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('roles', models.ManyToManyField(default=0, limit_choices_to={'name__in': ['SUPERADMIN', 'LINE', 'FACE', 'AREA']}, to='Api.roles')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('zones', models.ManyToManyField(to='Api.zones')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
